// Functions
// ------------------------

// Strip the units from a string
@function strip-units($value) {
  @return $value / ($value * 0 + 1);
}

// Calculate px from a rem/em value
@function px-calc($rem, $base-val: 16) {
  @if unit($rem) == px {
    @return $rem;
  }
  @if not unitless($rem) {
    $rem: strip-units($rem);
  }
  @if not unitless($base-val) {
    $base-val: strip-units($base-val);
  }
  @return ($rem * $base-val) * 1px;
}

// Calculate rems from a px value
@function rem-calc($px, $base-val: 16) {
  @if unit($px) == rem {
    @return $px;
  }
  @if not unitless($px) {
    $px: strip-units($px);
  }
  @if not unitless($base-val) {
    $base-val: strip-units($base-val);
  }
  @return ($px / $base-val) * 1rem;
}

// Calculate ems from a px value
@function em-calc($px, $base-val: 16) {
  @if unit($px) == em {
    @return $px;
  }
  @if not unitless($px) {
    $px: strip-units($px);
  }
  @if not unitless($base-val) {
    $base-val: strip-units($base-val);
  }
  @return ($px / $base-val) * 1em;
}

// Mix white with another color
@function tint($color, $percent: 15%) {
  @return mix(white, $color, $percent);
}

// Mix black with another color
@function shade($color, $percent: 15%) {
  @return mix(black, $color, $percent);
}

// Create a random color
@function random-color(
  $min: 0,
  $max: 255,
  $alpha: 1,
  $red: null,
  $green: null,
  $blue: null
) {
  @if $min < 0 {
    $min: -1;
  } @else {
    $min: $min - 1;
  }
  @if $max > 255 {
    $max: 256;
  } @else {
    $max: $max + 1;
  }

  $range: $max - $min;

  @if not $red {
    $red: random($range) + $min;
  }
  @if not $green {
    $green: random($range) + $min;
  }
  @if not $blue {
    $blue: random($range) + $min;
  }

  @return rgba($red, $green, $blue, $alpha);
}

// Generate a random number with a minimum/maximum
@function minmax($min: 0, $max: 100) {
  $rand: random();
  $number: $min + floor($rand * (($max - $min) + 1));

  @return $number;
}

// Replace a string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

// Check if a list contains something
@function list-contains($list, $var) {
  @if index($list, $var) {
    @return true;
  } @else {
    @return false;
  }
}

// Convert SVG to URL
// Source: https://codepen.io/jakob-e/pen/doMoML
@function svg-url($svg) {
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);

  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    $chunk: str-replace($chunk, '"', "'");
    $chunk: str-replace($chunk, "<", "%3C");
    $chunk: str-replace($chunk, ">", "%3E");
    $chunk: str-replace($chunk, "&", "%26");
    $chunk: str-replace($chunk, "#", "%23");

    // Keep size and compile time down, only add on documented fail
    // $chunk: str-replace($chunk, '|', '%7C');
    // $chunk: str-replace($chunk, '[', '%5B');
    // $chunk: str-replace($chunk, ']', '%5D');
    // $chunk: str-replace($chunk, '^', '%5E');
    // $chunk: str-replace($chunk, '`', '%60');
    // $chunk: str-replace($chunk, ';', '%3B');
    // $chunk: str-replace($chunk, '?', '%3F');
    // $chunk: str-replace($chunk, ':', '%3A');
    // $chunk: str-replace($chunk, '@', '%40');
    // $chunk: str-replace($chunk, '=', '%3D');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}
